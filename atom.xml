<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-03T07:25:51.498Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSAPP 读书笔记</title>
    <link href="http://example.com/2022/05/03/My-New-Post/"/>
    <id>http://example.com/2022/05/03/My-New-Post/</id>
    <published>2022-05-03T07:01:27.000Z</published>
    <updated>2022-05-03T07:25:51.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-1-章-计算机系统漫游"><a href="#第-1-章-计算机系统漫游" class="headerlink" title="第 1 章 计算机系统漫游"></a>第 1 章 计算机系统漫游</h1><h2 id="1-2-程序被其他程序翻译成不同格式"><a href="#1-2-程序被其他程序翻译成不同格式" class="headerlink" title="1.2 程序被其他程序翻译成不同格式"></a>1.2 程序被其他程序翻译成不同格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">  A(预处理器&lt;br&gt;cpp) --hell.i&lt;br&gt;修改了的源程序--&gt; B</span><br><span class="line">  B(编译器&lt;br&gt;cll) --hell.s&lt;br&gt;汇编程序--&gt; C</span><br><span class="line">  X(printf.o) --&gt; D</span><br><span class="line">  C(汇编器&lt;br&gt;as) --hell.o&lt;br&gt;可重定位目标程序--&gt; D(链接器&lt;br&gt;ld)</span><br><span class="line">  D --&gt; F(hello&lt;br&gt;可执行目标程序)</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">### 1.4.1 系统的硬件组成  </span><br><span class="line">内存是由一组动态随机存储器（DRAM）芯片组成的  </span><br><span class="line"></span><br><span class="line">L1 和 L2 高速缓存是用静态随机访问存储器（SRAM）的硬件技术实现的  </span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">## 1.7 操作系统管理硬件</span><br><span class="line"></span><br><span class="line">```mermaid</span><br><span class="line">flowchart LR</span><br><span class="line">    A(操作系统&lt;br&gt;有两个基本功能) --&gt; B(1 防止硬件被失控的程序滥用)</span><br><span class="line">    A --&gt; C(2 向应用程序提供简单一致的机制&lt;br&gt;来控制复杂而又大不相同的低级硬件设备)</span><br></pre></td></tr></table></figure><p>操作系统通过 3 个抽象概念（进程、虚拟内存和文件）来实现这两个功能：<br>1、文件是对 I&#x2F;O 设备的抽象表示<br>2、虚拟内存是对内存和磁盘 I&#x2F;O 设备的抽象表示<br>3、进程是对处理器、内存和 I&#x2F;O 设备的抽象表示  </p><p>虚拟机是对整个计算机对抽象，包括操作系统、处理器和程序<br><br></p><h3 id="1-7-1-进程"><a href="#1-7-1-进程" class="headerlink" title="1.7.1 进程"></a>1.7.1 进程</h3><p><font color=red>进程是操作系统对一个正在运行的程序的一种抽象</font>  </p><p>并发运行，则是说一个进程的指令和另一个进程的指令是交错执行的</p><p>OS 保持跟进进程运行所需的所有状态信息（上下文），比如 PC 和寄存器文件的当前值，以及内存的内容</p><p>进程间的切换是由操作系统内核（kernel）管理的，内核是操作系统代码常驻内存的部分</p><p>当应用程序需要 OS 的某些操作时（比如读写文件），它就执行一条特殊的系统调用（systemp call）指令，<br>将控制权传递给内核，然后内核执行被请求的操作并返回应用程序<br><br></p><h3 id="1-7-2-线程"><a href="#1-7-2-线程" class="headerlink" title="1.7.2 线程"></a>1.7.2 线程</h3><p>一个进程实际上可以由<font color=red>多个线程</font>的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据<br><br></p><h3 id="1-7-3-虚拟内存"><a href="#1-7-3-虚拟内存" class="headerlink" title="1.7.3 虚拟内存"></a>1.7.3 虚拟内存</h3><p>虚拟内存是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在独占地使用内存  </p><p>每个进程看到的内存都是一致的，称为<code>虚拟地址空间</code></p><p>进程的虚拟地址空间图（从下往上，地址增大）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">    A(内核虚拟内存) --&gt; B(用户栈&lt;br&gt;运行时创建)</span><br><span class="line">    B --&gt; C(null)</span><br><span class="line">    C --&gt; D(共享库的内存&lt;br&gt;映射区域)</span><br><span class="line">    D --&gt; E(null)</span><br><span class="line">    E --&gt; F(运行时堆&lt;br&gt;在运行时由 malloc 创建)</span><br><span class="line">    F --&gt; G(读/写数据)</span><br><span class="line">    G --&gt; H(只读的代码和数据)</span><br></pre></td></tr></table></figure><br><h3 id="1-7-4-文件"><a href="#1-7-4-文件" class="headerlink" title="1.7.4 文件"></a>1.7.4 文件</h3><p><font color=red>文件就是字节序列</font></p><p>系统中的<code>所有输入输出</code>都是通过使用一小组称为 Unix I&#x2F;O 的系统函数调用读写文件来实现的<br><br></p><h3 id="1-9-2-并发和并行"><a href="#1-9-2-并发和并行" class="headerlink" title="1.9.2 并发和并行"></a>1.9.2 并发和并行</h3><p>并发（concurrency）指一个同时具有多个活动多系统<br>并行（parallelism）指的是用并发来使一个系统运行得更快</p><h4 id="1、线程级并发"><a href="#1、线程级并发" class="headerlink" title="1、线程级并发"></a>1、线程级并发</h4><p>多核处理器是将多个CPU（称为“核”）集成到一个集成电路芯片上，每个核都有自己的 L1 和 L2 高速缓存</p><p>超线程，有时称为同时多线程（simultaneous multi-threading），是一项允许一个 CPU 执行多个控制流的技术。举例子来说，Intel Core i7 处理器可以让每个核执行两个线程，所以一个 4 核的系统实际上可以并行地执行 8 个线程</p><h4 id="2、指令级并行"><a href="#2、指令级并行" class="headerlink" title="2、指令级并行"></a>2、指令级并行</h4><p>在较低的抽象层次上，现代处理器可以同时执行多条指令的属性称为指令级并行</p><p>如果处理器可以达到比一个周期一条指令更快的执行效率，就称之为<code>超标量</code>（super-scalar）处理器</p><h4 id="3、单指令、多数据并行"><a href="#3、单指令、多数据并行" class="headerlink" title="3、单指令、多数据并行"></a>3、单指令、多数据并行</h4><p>在最低层次上，许多现代处理器拥有特殊的硬件，允许一条指令产生多个可以并行的操作，这种方式称为单指令、多数据，即 SIMD 并行<br><br></p><h1 id="第-2-章-程序结构和执行"><a href="#第-2-章-程序结构和执行" class="headerlink" title="第 2 章 程序结构和执行"></a>第 2 章 程序结构和执行</h1><h2 id="2-1-信息存储"><a href="#2-1-信息存储" class="headerlink" title="2.1 信息存储"></a>2.1 信息存储</h2><p>机器级程序将内存视为一个非常大的字节数组，称为虚拟内存（virtual memory）。内存的每个字节都由一个唯一的数字来标识，称为它的地址，所有可能地址的集合称为虚拟地址空间（virtual address space）</p><p>C 语言中一个指针的值（无论它指向一个整数、一个结构体或是某个其他程序对象）都是某个存储块的第一个字节的虚拟地址<br><br></p><h3 id="2-1-2-字数据大小"><a href="#2-1-2-字数据大小" class="headerlink" title="2.1.2 字数据大小"></a>2.1.2 字数据大小</h3><p>字长是CPU的主要技术指标之一，指的是CPU一次能并行处理的二进制位数，字长总是8的整数倍 </p><p>字长决定的最重要的系统参数就是虚拟地址空间的大小，对于一个字长为 w 位的机器而言，虚拟地址的范围为 0～2^w^-1 </p><p>比如 32 位字长限制虚拟地址空间位 4 千兆字节（4GB），2^32^ &#x3D; 2^10^(k) * 2^10^(M) * 2^10^(G) * 4  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux&gt; gcc -m32 prog.c # 可以在 32 位或 64 位机器上运行</span><br><span class="line">linux&gt; gcc -m64 prog.c # 只能在 64 位机器上运行</span><br></pre></td></tr></table></figure><p>因此我们将程序称为 “32 位程序” 或 “64 位程序”时，区别在于该程序是<code>如何编译</code>的，而不是其运行的机器类型</p><h3 id="2-1-4-表示字符串"><a href="#2-1-4-表示字符串" class="headerlink" title="2.1.4 表示字符串"></a>2.1.4 表示字符串</h3><p>不同的机器使用不同的且不兼容的指令和编码方式。即使是完全一样的进程，运行在不同的操作系统上也会有不同的编码规则，因此二进制代码是不兼容的。二进制代码很少能在不同机器和操作系统组合之间移植</p><h3 id="2-1-6-布尔代数简介"><a href="#2-1-6-布尔代数简介" class="headerlink" title="2.1.6 布尔代数简介"></a>2.1.6 布尔代数简介</h3><table><thead><tr><th align="center">布尔代数</th><th align="center">非</th><th align="center">且</th><th align="center">或</th><th align="center">异或</th></tr></thead><tbody><tr><td align="center">运算符</td><td align="center">~</td><td align="center">&amp;</td><td align="center">|</td><td align="center">^</td></tr><tr><td align="center">英文</td><td align="center">NOT</td><td align="center">AND</td><td align="center">OR</td><td align="center">EXCLUSIVE-OR</td></tr><tr><td align="center">命题逻辑符号</td><td align="center">$\neg$</td><td align="center">$\wedge$</td><td align="center">$\vee$</td><td align="center">$\oplus$</td></tr></tbody></table><h3 id="2-1-9-C-语言中的移位运算"><a href="#2-1-9-C-语言中的移位运算" class="headerlink" title="2.1.9 C 语言中的移位运算"></a>2.1.9 C 语言中的移位运算</h3><p>一般而言，机器支持两种形势的右移：<br>1、逻辑右移：在左端补 k 个 0<br>2、算数右移：在左端补 k 个最高有效位的值<br>这种做法看上去可能有点奇特，但是发现它对有符号整数数据的运算非常有用</p><h3 id="2-2-1-整数数据类型"><a href="#2-2-1-整数数据类型" class="headerlink" title="2.2.1 整数数据类型"></a>2.2.1 整数数据类型</h3><p>C 和 C++ 都支持有符号（默认）和无符号数。Java 只支持有符号数</p><h3 id="2-2-2-无符号数的编码"><a href="#2-2-2-无符号数的编码" class="headerlink" title="2.2.2 无符号数的编码"></a>2.2.2 无符号数的编码</h3><p>假设有一个整数数据类型有 $w$  位，则可以将位向量写成  $\vec{x}$ ，表示整个向量，或者写成 $[x_{w-1},\ x_{w-2},\ \cdots,\ x_0]$。在这个编码中，每个位  $x_i$  都取 0 或 1。我们用一个函数 $B2U_w$ (Binary to Unsigned 的缩写，长度为 $w$) 来表示：<br>原理： 无符号数编码的定义<br>对向量 $\vec{x}&#x3D;[x_{w-1},\ x_{w-2},\ \cdots,\ x_0]$:<br>$$B2U_w\doteq\sum\limits_{i&#x3D;0}^{w-1}x_i2^i$$<br>（符号 “$\doteq$” 表示左边被定义为等于右边）</p><p>最小值用位向量 $[000\cdots0]$ 表示，也就是整数 0；最大值用位向量 $[111\cdots1]$ 表示，也就是整数值 $UMax_w\doteq \sum\limits_{i&#x3D;0}^{w-1}2^w-1$</p><p>原理：无符号数编码的唯一性<br>函数 $B2U_w$ 是一个<code>双射</code>。<br>数学术语双射是指一个函数 $f$  有两面：它将数值 $x$ 映射为数值 $y$，即 $y&#x3D;f(x)$。但它也可以反向操作，因为对每一个 $y$ 而言，都有<font color=red>唯一</font>一个数值 $x$ 使得 $f(x)&#x3D;y$。这可以用反射函数 $f^{-1}$ 来表示。<br>函数 $B2U_w$ 将每一个长度为 $w$ 的位向量都映射为 $0\sim2^{w}-1$ 之间的一个<font color=red>唯一</font>值；<br>反过来，我们称其为 $U2B_w$（即”无符号数到二进制“），在 $0\sim2^w-1$ 之间的每一个整数都可以映射为一个<font color=red>唯一</fond>的长度为 $w$ 的位模式。</p><h3 id="2-2-3-补码编码"><a href="#2-2-3-补码编码" class="headerlink" title="2.2.3 补码编码"></a>2.2.3 补码编码</h3><p>最常见的有符号数的计算机表示方式就是<code>补码</code> (tow’s-comnplement) 形式</p><p>这个形式中，将字的最高有效位表示为负权，用函数 $B2T_w$(Binary to Two’s-complement 的缩写，长度为 $w$) 来表示：<br>原理：补码编码的定义<br>对向量 $\vec{x}&#x3D;[x_{w-1},\ x_{w-2},\ \cdots,\ x_0]$:<br>$$B2T_w \doteq -x_{w-1}2^{w-1} + \sum\limits_{i&#x3D;0}^{w-2}x_i2^i$$<br>最高有效位 $x_{w-1}$ 也称为符号位，它的 “权重” 为 $2^{w-1}$。符号位为 1 时，表示值为负，反之为<code>非负</code>(0 不是整数也不是负数)<br>$$TMin_w \doteq -2^{w-1}$$<br>$$\begin{aligned}<br>    TMax_w &amp;\doteq\sum\limits_{i&#x3D;0}^{w-2}2^i \<br>    &amp;\doteq \frac{2^0(1-2^{w-2})}{1-2} \<br>    &amp;\doteq 2^{w-1}-1<br>\end{aligned}$$<br>补码的范围是不对成的：$|TMin|&#x3D;|Tmax|+1$</p><p>为什么？因为 0 是非负数，导致偏移量少一个单位，意味着能表示的整数比负数少一个</p><h3 id="2-2-4-有符号数和无符号数之间的转换"><a href="#2-2-4-有符号数和无符号数之间的转换" class="headerlink" title="2.2.4 有符号数和无符号数之间的转换"></a>2.2.4 有符号数和无符号数之间的转换</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="type">int</span> v = <span class="number">-12345</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> uv = (<span class="type">unsigned</span> <span class="type">short</span>) v;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;v = %d, uv = %u\n&quot;</span>, v, uv);</span><br></pre></td></tr></table></figure><p>上面这段代码输出：v &#x3D; -12345, uv &#x3D; 53191<br>强制类型转换的结果保持位值不变，只是改变了解释这些位的方式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第-1-章-计算机系统漫游&quot;&gt;&lt;a href=&quot;#第-1-章-计算机系统漫游&quot; class=&quot;headerlink&quot; title=&quot;第 1 章 计算机系统漫游&quot;&gt;&lt;/a&gt;第 1 章 计算机系统漫游&lt;/h1&gt;&lt;h2 id=&quot;1-2-程序被其他程序翻译成不同格式&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="book" scheme="http://example.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/05/03/hello-world/"/>
    <id>http://example.com/2022/05/03/hello-world/</id>
    <published>2022-05-03T05:58:05.255Z</published>
    <updated>2022-05-03T05:58:05.255Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
